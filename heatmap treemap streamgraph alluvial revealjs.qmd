---
title: "Heatmaps Treemaps Streamgraphs and Alluvials"
author: "Rachel Saidi"
date: "2/18/2021"
format: revealjs
smaller: true
scrollable: true
execute: 
  echo: true
---

## So many ways to visualize data


### Load the packages and the data from flowingdata.com website

The data is a csv file that compares number of views, number of comments to various categories of Yau's visualization creations

```{r}
#install.packages("treemap")
#install.packages("RColorBrewer")
library(treemap)
library(tidyverse)
library(RColorBrewer)
```


## Heatmaps

A heatmap is a literal way of visualizing a table of numbers, where you substitute the numbers with colored cells. There are two fundamentally different categories of heat maps: the cluster heat map and the spatial heat map. In a cluster heat map, magnitudes are laid out into a matrix of fixed cell size whose rows and columns are discrete categories, and the sorting of rows and columns is intentional. The size of the cell is arbitrary but large enough to be clearly visible. By contrast, the position of a magnitude in a spatial heat map is forced by the location of the magnitude in that space, and there is no notion of cells; the phenomenon is considered to vary continuously. (Wikipedia)


## Load the nba data from Yau's website

This data appears to contain data about 2008 NBA player stats. 

```{r}
# How to make a heatmap
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")  
#apparently you have to use read.csv here instead of read_csv
head(nba)
```

## Create a cool-color heatmap 

```{r }
nba <- nba[order(nba$PTS),]
row.names(nba) <- nba$Name
nba <- nba[,2:19]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, 
                       col = cm.colors(256), scale="column", margins=c(5,10),
                       xlab = "NBA Player Stats",
                       ylab = "NBA Players",
                       main = "NBA Player Stats in 2008")
```

## Change to warm color palette


```{r}
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = heat.colors(256), 
                       scale="column", margins=c(5,10),
                        xlab = "NBA Player Stats",
                       ylab = "NBA Players",
                       main = "NBA Player Stats in 2008")
```

```{r}

```


## Use the viridis color palette



```{r}
library(viridis)
## Loading required package: viridisLite
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, col = viridis(25), 
                       scale="column", margins=c(5,10),
                        xlab = "NBA Player Stats",
                       ylab = "NBA Players",
                       main = "NBA Payer Stats in 2008")

```

## Treemaps

Treemaps display hierarchical (tree-structured) data as a set of nested rectangles. Each branch of the tree is given a rectangle, which is then tiled with smaller rectangles representing sub-branches. A leaf node's rectangle has an area proportional to a specified dimension of the data.[1] Often the leaf nodes are colored to show a separate dimension of the data.

When the color and size dimensions are correlated in some way with the tree structure, one can often easily see patterns that would be difficult to spot in other ways, such as whether a certain color is particularly relevant. A second advantage of treemaps is that, by construction, they make efficient use of space. As a result, they can legibly display thousands of items on the screen simultaneously.

## The Downside to Treemaps

The downside of treemaps is that as the aspect ratio is optimized, the order of placement becomes less predictable. As the order becomes more stable, the aspect ratio is degraded. (Wikipedia)

Use Nathan Yau's dataset from the flowingdata website:  http://datasets.flowingdata.com/post-data.txt 
You will need the package "treemap" and the package "RColorBrewer". 

## Create a treemap which explores categories of views

Load the data for creating a treemap from Nathan Yao's flowing data which explores number of views and comments for different categories of posts on his website.

```{r}
data <- read.csv("http://datasets.flowingdata.com/post-data.txt")
head(data)
```


## Use RColorBrewer to change the palette to RdYlBu

```{r}
treemap(data, index="category", vSize="views", 
        vColor="comments", type="manual",    
        # note: type = "manual" changes to red yellow blue
        palette="RdYlBu")
```

## Notice the following:

* The index is a categorical variable - in this case, "category" of post
* The size of the box is by number of views of the post
* The heatmap color is by number of comments for the post

* Notice how the treemap includes a legend for number of comments *


## Use the dataset NYCFlights13 to create a heatmap that explores Late Arrivals

```{r}
#install.packages("nycflights13")
library(nycflights13)
library(RColorBrewer)
data(flights)
```

## Create an initial scatterplot with loess smoother for distance to delays

Use "group_by" together with summarise functions

Remove observations with NA values from distand and arr_delay variables - notice number of rows changed from 336,776 to 327,346

```{r}
flights_nona <- flights %>%
  filter(!is.na(distance) & !is.na(arr_delay))  # remove na's for distance and arr_delay
```

## Use group_by and summarise to create a summary table

The table includes, counts for each tail number, mean distance traveled, and mean arrival delay

```{r}
by_tailnum <- flights_nona %>%
  group_by(tailnum) %>%  # group all tailnumbers together
  summarise(count = n(),   # counts totals for each tailnumber
        dist = mean(distance), # calculates the mean distance traveled
        delay = mean(arr_delay)) # calculates the mean arrival delay
delay <- filter(by_tailnum, count > 20, dist < 2000) # only include counts > 20 and distance < 2000 mi
```

## Average delay is only slightly related to average distance flown by a plane.

```{r}
ggplot(delay, aes(dist, delay)) +
  geom_point(aes(size = count), alpha = 1/2) +
  geom_smooth() +
  scale_size_area()
```


## Late Arrivals Affect the Usage Cost of Airports 

This was modified from Raul Miranda's work
Create a dataframe that is composed of summary statistics 

```{r}
delays <- flights_nona %>%    # create a delays dataframe by:
  group_by (dest) %>%         # grouping by point of destination
  summarize (count = n(),     # creating variables: number of flights to each destination,
             dist = mean (distance),   # the mean distance flown to each destination,
             delay = mean (arr_delay), # the mean delay of arrival to each destination,
             delaycost = mean(count*delay/dist)) # delay cost index defined as:
                                       #  [(number of flights)*delay/distance] for a destination
delays <- arrange(delays, desc(delaycost))    # sort the rows by delay cost
head(delays)                            # look at the data
```


## This shows Reagan National (DCA) with the highest delay cost, and Dulles 

#### Here is another way to display all destinations in the table using the knitr package with the function, kable

```{r}
#install.packages("knitr")
library(knitr)
kable(delays, 
      caption = "Table of Mean Distance, Mean Arrival Delay, and Highest Delay Costs",
      digits = 2)  # round values to 2 decimal places
```

## Now get the top 100 delay costs to create a heatmap of those flights.

```{r}
top100 <- delays %>%                  # select the 100 largest delay costs
  head(100) %>%
  arrange(delaycost)                  # sort ascending so the heatmap displays descending costs
row.names(top100) <- top100$dest      # rename the rows according to destination airport codes
```


## In order to make a heatmap, convert the dataframe to matrix form

```{r}
delays_mat <- data.matrix(top100)  # convert delays dataframe to a matrix  (required by heatmap)
delays_mat2 <- delays_mat[,2:5]    # remove the redundant column of destination airport codes
```

## Create a heatmap using colorBrewer

color set, margins=c(7,10) for aspect ratio, titles of graph, x and y labels,font size of x and y labels, and set up a RowSideColors bar


## Flights Plot

```{r}
heatmap(delays_mat2, 
        Rowv = NA, Colv = NA, 
        col= viridis(25),
        s=0.6, v=1, scale="column", 
        margins=c(7,10), 
        main = "Cost of Late Arrivals", 
        xlab = "Flight Characteristics", 
        ylab="Arrival Airport", labCol =      c("Flights","Distance","Delay","Cost Index"),
        cexCol=1, cexRow =1)
```


## What did this heatmap show?

"Cost index" is defined as a measure of how arrival delays impact the cost of flying into each airport and is calculated as number of flights * mean delay / mean flight distance. For airlines it is a measure of how much the cost to fly to an airport increases due to frequent delays of arrival. Cost index is inversely proportional to distance because delays affect short flights more than long flights and because the profit per seat increases with distance due to the larger and more efficient planes used for longer distances.

The variance in delays across airports is mainly due to (a) airline traffic congestion relative to the airport size; and (b)regional climate and weather events. It is not strongly dependent upon airline carrier or tailnumber.

Therefore, airports such as ORD and BOS have high cost index because they are highly congested and are frequently delayed due to weather. Airports like IAD, PHL, DTW, etc., are very congested despite their large size and also show high cost index. Smaller airports such as HDN, SNA, HNL, LEX, etc., have null to slightly negative cost index because they are not congested and keep flights on time.


## Streamgraphs

This type of visualisation is a variation of a stacked area graph, but instead of plotting values against a fixed, straight axis, a streamgraph has values displaced around a varying central baseline. Streamgraphs display the changes in data over time of different categories through the use of flowing, organic shapes that somewhat resemble a river-like stream. This makes streamgraphs aesthetically pleasing and more engaging to look at.

The size of each individual stream shape is proportional to the values in each category. The axis that a streamgraph flows parallel to is used for the timescale. Color can be used to either distinguish each category or to visualize each category's additional quantitative values through varying the color shade.

## What are streamgraphs good for?

Streamgraphs are ideal for displaying high-volume datasets, in order to discover trends and patterns over time across a wide range of categories. For example, seasonal peaks and troughs in the stream shape can suggest a periodic pattern. A streamgraph could also be used to visualize the volatility for a large group of assets over a certain period of time.

The downside to a streamgraph is that they suffer from legibility issues, as they are often very cluttered. The categories with smaller values are often drowned out to make way for categories with much larger values, making it impossible to see all the data. Also, it's impossible to read the exact values visualized, as there is no axis to use as a reference.

### Streamgraph code

The code for making streamgraphs has changed with new updates to R.
You have to download and install Rtools40  from the link,
https://cran.rstudio.com/bin/windows/Rtools/.
and then used the code provided below.

## Load devtools and libraries to create the following streamgraphs

```{r force = TRUE}
#devtools::install_github("hrbrmstr/streamgraph")
#devtools::session_info()
library(dplyr)
library(streamgraph)
library(babynames)
babynames <- babynames
```


## A trivial streamgraph using simulated names over time

```{r}
# Create data:
year=rep(seq(1990,2016) , each=10)
name=rep(letters[1:10] , 27)
value=sample( seq(0,1,0.0001) , length(year))
data=data.frame(year, name, value)
# Basic stream graph: just give the 3 arguments
streamgraph(data, key="name", value="value", date="year")

```

## Now look at the babynames dataset

```{r}
ncol(babynames)
head(babynames)
str(babynames)
```

## Babynames streamgraph

Mouse over the colors and years to look at the pattern of various names

```{r}
babynames %>%
  filter(grepl("^Xi", name)) %>%
  group_by(year, name) %>%
  tally(wt=n) %>%
  streamgraph("name", "n", "year")
```


## Alluvials

Load the alluvial package

#### Refugees is a prebuilt dataset in the alluvial package

If you want to save the prebuilt dataset to your folder, use the write_csv function

```{r}
library(alluvial)
library(ggalluvial)
data(Refugees)
#write_csv(Refugees, "refugees.csv") # if you want to save this dataset to your own folder
```


## Show UNHCR-recognised refugees 

Top 10 most affected countries causing refugees from 2003-2013
Alluvials need the variables:  *time-variable, value, category*

```{r, message=FALSE}
ggalluv <- ggplot(Refugees,
             aes(x = year, y = refugees, alluvium = country)) + # time series bump chart (quintic flows)
  theme_bw() +
  geom_alluvium(aes(fill = country), 
                color = "white",
                width = .1, 
                alpha = .8,
                decreasing = FALSE) +
  scale_fill_brewer(palette = "Spectral") + # Spectral has enough colors for all countries listed
  scale_x_continuous(lim = c(2002, 2013))+
  ggtitle("UNHCR-Recognised Refugees \n Top 10 Countries(2003-2013)\n")+ # \n breaks the long title
  ylab("Number of Refugees")
```

## Refugee Plot

```{r}
ggalluv
```


## A final touch to fix the y-axis scale

Notice the y-values are in scientific notation. We can convert them to standard notation with options scipen function

```{r}
options(scipen = 999)
ggalluv
```




