---
title: "Heat Tree Stream Alluvial - Part 1"
author: "R Saidi"
format: docx
scrollable: true
smaller: true
execute:
  echo: true
---


## So many ways to visualize data

### Load the packages and the data from flowingdata.com website



```{r message=FALSE, warning=FALSE}
library(treemap)
library(tidyverse)
library(RColorBrewer)
library(webshot2)
```

## Heatmaps

A heatmap is a literal way of visualizing a table of numbers, where you substitute the numbers with colored cells. There are two fundamentally different categories of heat maps: the cluster heat map and the spatial heat map. In a cluster heat map, magnitudes are laid out into a matrix of fixed cell size whose rows and columns are discrete categories, and the sorting of rows and columns is intentional. The size of the cell is arbitrary but large enough to be clearly visible. By contrast, the position of a magnitude in a spatial heat map is forced by the location of the magnitude in that space, and there is no notion of cells; the phenomenon is considered to vary continuously. (Wikipedia)

## Load the nba data from Yau's website

This data appears to contain data about 2008 NBA player stats.

```{r}
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")  
#apparently you have to use read.csv here instead of read_csv
head(nba)
```

## Create a cool-color heatmap

This older heatmap function requires the data to be formatted as a matrix using the data.matrix

```{r }
nba <- nba[order(nba$PTS),]
row.names(nba) <- nba$Name
nba <- nba[,2:19]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, 
                       Rowv=NA, 
                       Colv=NA, 
                       col = cm.colors(10), 
                       scale="column", 
                       margins=c(5,10),
                       xlab = "NBA Player Stats",
                       ylab = "NBA Players",
                       main = "NBA Player Stats in 2008")
```

## What did that plot show?


The basic layout of the heatmap relies on the parameters rows, columns and values. You can think of them like aesthetics in ggplot2::ggplot(), similar to something like aes(x = columns, y = rows, fill = values).

## Change to warm color palette

```{r}
nba_heatmap <- heatmap(nba_matrix, 
                       Rowv=NA, 
                       Colv=NA, 
                       col = heat.colors(20), 
                       scale="column", 
                       margins=c(5,10),
                       xlab = "NBA Player Stats",
                       ylab = "NBA Players",
                       main = "NBA Player Stats in 2008")
```

## Use the viridis color palette

For some reason the veridis colors from viridisLite package default to give dentrite clusering (the branches).

```{r}
library(viridis)
# Loading required package: viridis
nba_heatmap <- heatmap(nba_matrix, 
                       Rowv=NA, 
                       col = viridis(20), 
                       scale="column", 
                       margins=c(5,10),
                       xlab = "NBA Player Stats",
                       ylab = "NBA Players",
                       keep.dendro = FALSE,
                       main = "NBA Payer Stats in 2008")
```

## Treemaps

Treemaps display hierarchical (tree-structured) data as a set of nested rectangles. Each branch of the tree is given a rectangle, which is then tiled with smaller rectangles representing sub-branches. A leaf node's rectangle has an area proportional to a specified dimension of the data.\[1\] Often the leaf nodes are colored to show a separate dimension of the data.

When the color and size dimensions are correlated in some way with the tree structure, one can often easily see patterns that would be difficult to spot in other ways, such as whether a certain color is particularly relevant. A second advantage of treemaps is that, by construction, they make efficient use of space. As a result, they can legibly display thousands of items on the screen simultaneously.

## The Downside to Treemaps

The downside of treemaps is that as the aspect ratio is optimized, the order of placement becomes less predictable. As the order becomes more stable, the aspect ratio is degraded. (Wikipedia)

Use Nathan Yau's dataset from the flowingdata website: http://datasets.flowingdata.com/post-data.txt You will need the package "treemap" and the package "RColorBrewer".

## Create a treemap which explores categories of views

Load the data for creating a treemap from Nathan Yao's flowing data which explores number of views and comments for different categories of posts on his website.

```{r}
flowingdata <- read.csv("http://datasets.flowingdata.com/post-data.txt")
# again, here use read.csv instead of read_csv
head(flowingdata)
```

## Use RColorBrewer to change the palette to RdYlBu

```{r}
treemap(flowingdata, index="category", vSize="views", 
        vColor="comments", type="manual",    
        # note: type = "manual" changes to red yellow blue
        palette="RdYlBu")
```

## Notice the following:

-   The index is a categorical variable - in this case, "category" of post

-   The size of the box is by number of views of the post

-   The heatmap color is by number of comments for the post

-   Notice how the treemap includes a legend for number of comments \*

## A heatmap of World Happiness

Set your working directory and read in the happiness19.csv from the class google drive.

```{r warning=FALSE, message=FALSE}
setwd("C:/Users/rsaidi/Dropbox/Rachel/MontColl/Datasets/Datasets")
happy19 <- read_csv("happiness2019.csv")
head(happy19)
```

We can see that there are 156 countries ranked by their "happiness score" based on other measurements.

## Clean the happiness dataset to work with it

first remove the first column for "overall_rank". Clean the remaining headers.

```{r}
happy <- happy19 |>
  select(-`Overall rank`) 
names(happy) <- tolower(names(happy))
names(happy) <- gsub(" ", "_", names(happy))
```

Because there are 156 countries, narrow the inclusion criteria to be for the top 20 scoring countries. Then do the same for the lowest 20.

```{r}
happytop <- happy |>
  arrange(desc(score)) |>
  mutate(happy = "top") |> # add a column for use later
  head(20)
happytop
```

```{r}
happybottom <- happy |>
  arrange(score) |>
  mutate(happy = "bottom") |>
  head(20)
happybottom
```

Then convert from wide to long format.

```{r}
happy_longtop <- happytop |>
  pivot_longer(cols = 2:8,
               names_to = "measurements",
               values_to = "values")
happy_longtop
```

```{r}
happy_longbottom <- happybottom |>
  pivot_longer(cols = 2:8,
               names_to = "measurements",
               values_to = "values")
happy_longbottom
```

```{r}
ggplot(data = happy_longtop, aes(x=country_or_region, y=measurements, fill = values)) +
  geom_tile()+
  scale_fill_distiller(palette="Spectral") +
  theme_bw()+
  theme(axis.text.x = element_text(angle = 90))
```

*What do we notice a common patterns and different patterns at the top?*

```{r}
ggplot(data = happy_longbottom, aes(x=country_or_region, y=measurements, fill = values)) +
  geom_tile()+
  scale_fill_distiller(palette="Spectral") +
  theme_bw()+
  theme(axis.text.x = element_text(angle = 90))
```

*What do we notice a common patterns and different patterns at the bottom?*

## Put the top 20 and bottom 20 together to compare the two plots

```{r}
newdf <- rbind(happytop, happybottom)
newdf_long <- newdf |>
    pivot_longer(cols = 2:8,
               names_to = "measurements",
               values_to = "values")
head(newdf_long)
```

## create a facet plot of the geom_tile

```{r}
ggplot(data = newdf_long, aes(x=country_or_region, y=measurements, fill = values)) +
  geom_tile()+
  scale_fill_distiller(palette="Spectral") +
  facet_grid(~happy) +
  theme_bw()+
  theme(axis.text.x = element_blank())  # remove the countries to generally compare top and bottom ranked countries 
```


**The facet plot places the top and bottom countries on the same scale, and now we can really make comparisons.**

*What do you notice now?*

## Alluvials

Load the alluvial package

#### Refugees is a prebuilt dataset in the alluvial package

If you want to save the prebuilt dataset to your folder, use the write_csv function

```{r}
library(alluvial)
library(ggalluvial)
data(Refugees)
```

## Show UNHCR-recognised refugees

Top 10 most affected countries causing refugees from 2003-2013 Alluvials need the variables: *time-variable, value, category*

```{r, message=FALSE}
ggalluv <- Refugees |>
  ggplot(aes(x = year, y = refugees, alluvium = country)) + 
  theme_bw() +
  geom_alluvium(aes(fill = country), 
                color = "white",
                width = .1, 
                alpha = .8,
                decreasing = FALSE) +
  scale_fill_brewer(palette = "Spectral") + 
  # Spectral has enough colors for all countries listed
  scale_x_continuous(lim = c(2002, 2013)) +
  labs(title = "UNHCR-Recognised Refugees Top 10 Countries\n (2003-2013)",
         # \n breaks the long title
       y = "Number of Refugees", 
       fill = "Country",
       caption = "Source: United Nations High Commissioner for Refugees (UNHCR)")
```

## Plot the Alluvial

```{r}
ggalluv
```

## A final touch to fix the y-axis scale

Notice the y-values are in scientific notation. We can convert them to standard notation with options scipen function

```{r}
options(scipen = 999)
ggalluv
```

## Use the dataset NYCFlights23 to create a heatmap that explores Late Arrivals

Source: FAA Aircraft registry,\
https://www.faa.gov/licenses_certificates/aircraft_certification/ aircraft_registry/releasable_aircraft_download/

```{r}
#install.packages("nycflights23")
library(nycflights23)
library(RColorBrewer)
data(flights)
data(airlines)
```


## Create an initial scatterplot with loess smoother for distance to delays

Use "group_by" together with summarise functions

Remove observations with NA values from distand and arr_delay variables - notice number of rows changed from 336,776 to 327,346

**Never use the function "na.omit"!!!!**

```{r}
flights_nona <- flights |>
  filter(!is.na(distance) & !is.na(arr_delay))  
# remove na's for distance and arr_delay
```

## Use group_by and summarise to create a summary table

The table includes, counts for each tail number, mean distance traveled, and mean arrival delay

```{r}
by_tailnum <- flights_nona |>
  group_by(tailnum) |>  # group all tailnumbers together
  summarise(count = n(),   # counts totals for each tailnumber
            dist = mean(distance), # calculates the mean distance traveled
            delay = mean(arr_delay)
            ) # calculates the mean arrival delay
head(by_tailnum)

delay <- filter(by_tailnum, count > 20, dist < 2000) 
# only include counts > 20 and distance < 2000 mi
```

## Average delay is only slightly related to average distance flown by a plane.

```{r}
ggplot(delay, aes(dist, delay)) +
  geom_point(aes(size = count), alpha = .3) +
  geom_smooth() +
  scale_size_area() +
  theme_bw() +
  labs(x = "Average Flight Distance (miles)",
       y = "Average Arrival Delay (minutes)",
       caption = "FAA Aircraft registry",
       title = "Flight Distance and Average Arrival Delays \n from Flights from NY")
```
